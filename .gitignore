#include <stadio.h>
#include <conio.h>

 import { jest } from '@jest/globals'

import { getInitialState } from '../../lib/state.js'
import { GetBackupStashError } from '../../lib/symbols'

jest.unstable_mockModule('../../lib/execGit.js', () => ({
  execGit: jest.fn(async () => {
    /** Mock fails by default */
    return ''
  }),
}))

const { execGit } = await import('../../lib/execGit.js')
const { GitWorkflow, STASH } = await import('../../lib/gitWorkflow.js')

describe('gitWorkflow', () => {
  const options = { gitConfigDir: '.' }

  describe('getBackupStash', () => {
    it('should throw when stash not found', async () => {
      const gitWorkflow = new GitWorkflow(options)
      const ctx = getInitialState()

      await expect(gitWorkflow.getBackupStash(ctx)).rejects.toThrowError(
        'lint-staged automatic backup is missing!'
      )

      expect(ctx.errors.has(GetBackupStashError)).toEqual(true)
    })

    it('should throw when stash not found even when other stashes are', async () => {
      const gitWorkflow = new GitWorkflow(options)
      const ctx = getInitialState()

      execGit.mockResolvedValueOnce('stash@{0}: some random stuff')

      await expect(gitWorkflow.getBackupStash(ctx)).rejects.toThrowError(
        'lint-staged automatic backup is missing!'
      )

      expect(ctx.errors.has(GetBackupStashError)).toEqual(true)
    })

    it('should return ref to the backup stash', async () => {
      const gitWorkflow = new GitWorkflow(options)
      const ctx = getInitialState()

      execGit.mockResolvedValueOnce(
        [
          'stash@{0}: some random stuff',
          `stash@{1}: ${STASH}`,
          'stash@{2}: other random stuff',
        ].join('\n')
      )

      await expect(gitWorkflow.getBackupStash(ctx)).resolves.toEqual('1')
    })
  })
})

{ int main(int argc, char **argv)
 {
     const char *name;
     FILE *input, *output;
     unsigned int length = 0;
     unsigned char data;
  
     if (argc < 3 || argc > 4)
         return 1;
  
     input = fopen(argv[1], "rb");
     if (!input)
         return -1;
  
     output = fopen(argv[2], "wb");
     if (!output)
}

#include<staio.h>
#include<conio,h>

{

         return -1;
  
     if (argc == 4) {
         name = argv[3];
     } else {
         size_t arglen = strlen(argv[1]);
         name = argv[1];
  
         for (int i = 0; i < arglen; i++) {
             if (argv[1][i] == '.')
                 argv[1][i] = '_';
             else if (argv[1][i] == '/')
                 name = &argv[1][i+1];
         }
     }
  
     fprintf(output, "const unsigned char ff_%s_data[] = { ", name);
  
     while (fread(&data, 1, 1, input) > 0) {
         fprintf(output, "0x%02x, ", data);
         length++;
     }
  
     fprintf(output, "0x00 };\n");
     fprintf(output, "const unsigned int ff_%s_len = %u;\n", name, length);
  
     fclose(output);
  
     if (ferror(input) || !feof(input))
         return -1;
  
     fclose(input);
  
     return 0;
 }
